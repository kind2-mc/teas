//! Oracle for lustre node `top` (see [Top](struct.Top.html)).
//!
//! Code generated by the [Kind 2 model checker][kind 2].
//!
//! [kind 2]: http://kind2-mc.github.io/kind2/ (The Kind 2 model checker)

// Deactiving lint warnings the transformation does not respect.
#![allow(
  non_upper_case_globals, non_snake_case, non_camel_case_types,
  unused_variables, unused_parens
)]

use helpers::* ;

/// Entry point.
fn main() {
  clap_and_run()
}


/// Stores the state for the oracle for **top node** `top`.
///
/// # Inputs
///
/// | Lustre identifier | Type | Source |
/// |:---:|:---:|:---|
/// | `in` | Int | input |
/// | `dont_care` | Int | input |
/// | `cpt` | Int | output |
/// | `ok` | Bool | output |
///
/// # Outputs
///
/// The outputs of the oracle are the guarantees of the original
/// system and the implications for each require of each mode.
      ///
/// That is, if a mode has requires `req_1`, ..., `req_n` and ensures
/// `ens_1`, ..., `ens_m` this will generate `m` outputs:
///
/// - `(req_1 && ... && req_n) => ens_1`
      /// - ...
      /// - `(req_1 && ... && req_n) => ens_n`
      ///
/// Hence, an ensure output is false iff the mode is active and the
      /// ensure is false.
      ///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `abs_2` | Bool |
/// | `mode_neg_1` | Bool |
/// | `mode_pos_1` | Bool |
/// | `mode_zero_1` | Bool |
///
/// ## Guarantees
///
/// | Lustre identifier | Assumption number | Position |
/// |:---:|:---:|:---|
/// | `abs_2` | 1 | line 12 col. 2 |

          ///
/// ## Mode **neg**
///
/// Position: *line 21 col. 2*.
///
/// | Lustre identifier | Mode require number | Position |
/// |:---:|:---:|:---|
/// | `abs_8` | 1 | line 23 col. 4 |

              
///
/// ## Mode **pos**
///
/// Position: *line 17 col. 2*.
///
/// | Lustre identifier | Mode require number | Position |
/// |:---:|:---:|:---|
/// | `abs_6` | 1 | line 19 col. 4 |

              
///
/// ## Mode **zero**
///
/// Position: *line 13 col. 2*.
///
/// | Lustre identifier | Mode require number | Position |
/// |:---:|:---:|:---|
/// | `abs_4` | 1 | line 15 col. 4 |

              
///
/// # Assumptions
///
/// | State variable | Position | Number |
/// |:------:|:-----:|:-----:|
/// | `abs_0` | line 10 col. 2 | 1 |
/// | `abs_1` | line 11 col. 2 | 2 |
///
pub struct Top {
  /// Input: `top.usr.in`
  pub svar_in: Int,
  /// Input: `top.usr.dont_care`
  pub svar_dont_care: Int,
  /// Input: `top.usr.cpt`
  pub svar_cpt: Int,
  /// Input: `top.usr.ok`
  pub svar_ok: Bool,

  /// Output: `top.res.abs_2`
  pub svar_abs_2: Bool,
  /// Output: `.mode_neg_1`
  pub svar_mode_neg_1: Bool,
  /// Output: `.mode_pos_1`
  pub svar_mode_pos_1: Bool,
  /// Output: `.mode_zero_1`
  pub svar_mode_zero_1: Bool,

  /// Local: `top.res.abs_10`
  pub svar_abs_10: Bool,
  /// Local: `top.res.abs_9`
  pub svar_abs_9: Int,

  /// Call to `test` (line 28 col. 14).
  pub test_0: Test,
}

impl Sys for Top {
  type Input = (
    Int, // svar_in (top.usr.in)
    Int, // svar_dont_care (top.usr.dont_care)
    Int, // svar_cpt (top.usr.cpt)
    Bool, // svar_ok (top.usr.ok)
  ) ;
  type Output = (
    Bool, // svar_abs_2 (top.res.abs_2)
    Bool, // svar_mode_neg_1 (.mode_neg_1)
    Bool, // svar_mode_pos_1 (.mode_pos_1)
    Bool, // svar_mode_zero_1 (.mode_zero_1)
  ) ;
  fn arity() -> usize { 4 }
  fn input_of(vec: Vec<String>) -> Result<Self::Input, String> {
    match vec.len() {
      n if n == Self::arity() => {
        Ok( (
          try!( parse::int(& vec[0]) ), 
          try!( parse::int(& vec[1]) ), 
          try!( parse::int(& vec[2]) ), 
          try!( parse::bool(& vec[3]) ),
        ) )
      },
      n => Err(
        format!(
          "arity mismatch, expected {} but got {}: {:?}",
          Self::arity(), n, vec
        )
        
      ),
    }
  }

  fn init(input: Self::Input) -> Result<Self, String> {
    // |===| Retrieving inputs.
    let svar_in = input.0 ;
    let svar_dont_care = input.1 ;
    let svar_cpt = input.2 ;
    let svar_ok = input.3 ;
    
    // |===| Computing initial state.
    let svar_abs_5 = (svar_in < 0) ;
    let svar_abs_7 = (svar_in > 0) ;
    let svar_abs_3 = (svar_in == 0) ;
    let svar_abs_6 = (svar_cpt < 0) ;
    let svar_abs_8 = (svar_cpt > 0) ;
    let svar_abs_0 = (- 10 <= svar_in) ;
    let svar_abs_4 = (svar_cpt == 0) ;
    let svar_abs_2 = (svar_cpt == svar_in) ;
    let svar_abs_1 = (svar_in <= 10) ;
    let svar_mode_neg_1 = ((! svar_abs_7) | svar_abs_8) ;
    let svar_mode_pos_1 = ((! svar_abs_5) | svar_abs_6) ;
    let svar_mode_zero_1 = ((! svar_abs_3) | svar_abs_4) ;
    let test_0 = try!( Test::init( (
      svar_in,
    ) ) ) ;
    let (
      svar_abs_9,
      svar_abs_10,
    ) = test_0.output() ;
    
    let svar_cpt = svar_abs_9 ;
    let svar_ok = svar_abs_10 ;
    
    // |===| Checking assertions.
    
    
    // Assumption number 1 at line 10 col. 2
    if ! svar_abs_0 {
      return Err(
        "assumption failure: line 10 col. 2 (assumption number 1)".to_string()
      )
    } ;
    // Assumption number 2 at line 11 col. 2
    if ! svar_abs_1 {
      return Err(
        "assumption failure: line 11 col. 2 (assumption number 2)".to_string()
      )
    } ;// |===| Returning initial state.
    Ok( Top {
      // |===| Inputs.
      svar_in: svar_in,
      svar_dont_care: svar_dont_care,
      svar_cpt: svar_cpt,
      svar_ok: svar_ok,
      
      // |===| Outputs.
      svar_abs_2: svar_abs_2,
      svar_mode_neg_1: svar_mode_neg_1,
      svar_mode_pos_1: svar_mode_pos_1,
      svar_mode_zero_1: svar_mode_zero_1,
      
      // |===| Locals.
      svar_abs_10: svar_abs_10,
      svar_abs_9: svar_abs_9,
      
      // |===| Calls.
      test_0: test_0,
    } )
  }

  fn next(mut self, input: Self::Input) -> Result<Self, String> {
    // |===| Retrieving inputs.
    let svar_in = input.0 ;
    let svar_dont_care = input.1 ;
    let svar_cpt = input.2 ;
    let svar_ok = input.3 ;
    
    // |===| Computing next state.
    let svar_abs_5 = (svar_in < 0) ;
    let svar_abs_7 = (svar_in > 0) ;
    let svar_abs_3 = (svar_in == 0) ;
    let svar_abs_6 = (svar_cpt < self.svar_cpt) ;
    let svar_abs_8 = (svar_cpt > self.svar_cpt) ;
    let svar_abs_0 = (- 10 <= svar_in) ;
    let svar_abs_4 = (svar_cpt == self.svar_cpt) ;
    let svar_abs_2 = (svar_cpt == (svar_in + self.svar_cpt)) ;
    let svar_abs_1 = (svar_in <= 10) ;
    let svar_mode_neg_1 = ((! svar_abs_7) | svar_abs_8) ;
    let svar_mode_pos_1 = ((! svar_abs_5) | svar_abs_6) ;
    let svar_mode_zero_1 = ((! svar_abs_3) | svar_abs_4) ;
    let test_0 = try!( self.test_0.next( (
      svar_in,
    ) ) ) ;
    let (
      svar_abs_9,
      svar_abs_10,
    ) = test_0.output() ;
    let svar_cpt = svar_abs_9 ;
    let svar_ok = svar_abs_10 ;
    
    // |===| Checking assertions.
    // (in >= 0)
    if ! (
      (svar_in >= 0)
    ) {
      return Err(
        "assertion failure: (in >= 0)".to_string()
      )
    } ;
    
    // |===| Checking assumptions.
    // Assumption number 1 at line 10 col. 2
    if ! svar_abs_0 {
      return Err(
        "assumption failure: line 10 col. 2 (assumption number 1)".to_string()
      )
    } ;
    // Assumption number 2 at line 11 col. 2
    if ! svar_abs_1 {
      return Err(
        "assumption failure: line 11 col. 2 (assumption number 2)".to_string()
      )
    } ;
    
    // |===| Updating next state.
    // |===| Inputs.
    self.svar_in = svar_in ;
    self.svar_dont_care = svar_dont_care ;
    self.svar_cpt = svar_cpt ;
    self.svar_ok = svar_ok ;
    
    // |===| Outputs.
    self.svar_abs_2 = svar_abs_2 ;
    self.svar_mode_neg_1 = svar_mode_neg_1 ;
    self.svar_mode_pos_1 = svar_mode_pos_1 ;
    self.svar_mode_zero_1 = svar_mode_zero_1 ;
    
    // |===| Locals.
    self.svar_abs_10 = svar_abs_10 ;
    self.svar_abs_9 = svar_abs_9 ;
    
    // |===| Calls.
    self.test_0 = test_0 ;
    
    // |===| Return new state.
    Ok( self )
  }

  fn output(& self) -> Self::Output {(
    self.svar_abs_2,
    self.svar_mode_neg_1,
    self.svar_mode_pos_1,
    self.svar_mode_zero_1,
  )}
  fn output_str(& self) -> String {
    format!(
      "{}, \
      {}, \
      {}, \
      {}",
      self.svar_abs_2,
      self.svar_mode_neg_1,
      self.svar_mode_pos_1,
      self.svar_mode_zero_1
    )
  }
}

/// Stores the state for sub-node `test`.
///
/// # Inputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `in` | Int |
///
/// # Outputs
///
/// | Lustre identifier | Type |
/// |:---:|:---|
/// | `cpt` | Int |
/// | `ok` | Bool |
///
/// # Sub systems
///
/// No subsystems for this system.
///
/// # Assertions
///
/// No assertions for this system.
///
/// # Assumptions
///
/// No assumptions for this system.
///
pub struct Test {
  /// Input: `test.usr.in`
  pub svar_in: Int,

  /// Output: `test.usr.cpt`
  pub svar_cpt: Int,
  /// Output: `test.usr.ok`
  pub svar_ok: Bool,


}

impl Sys for Test {
  type Input = (
    Int, // svar_in (test.usr.in)
  ) ;
  type Output = (
    Int, // svar_cpt (test.usr.cpt)
    Bool, // svar_ok (test.usr.ok)
  ) ;
  fn arity() -> usize { 1 }
  fn input_of(vec: Vec<String>) -> Result<Self::Input, String> {
    match vec.len() {
      n if n == Self::arity() => {
        Ok( (
          try!( parse::int(& vec[0]) ),
        ) )
      },
      n => Err(
        format!(
          "arity mismatch, expected {} but got {}: {:?}",
          Self::arity(), n, vec
        )
        
      ),
    }
  }

  fn init(input: Self::Input) -> Result<Self, String> {
    // |===| Retrieving inputs.
    let svar_in = input.0 ;
    
    // |===| Computing initial state.
    let svar_cpt = svar_in ;
    let svar_ok = (svar_cpt >= 0) ;
    
    // |===| Checking assertions.
    // |===| Checking assumptions.
    
    
    
    
    // |===| Returning initial state.
    Ok( Test {
      // |===| Inputs.
      svar_in: svar_in,
      
      // |===| Outputs.
      svar_cpt: svar_cpt,
      svar_ok: svar_ok,
      
      // |===| Locals.
      
      
      // |===| Calls.
      
    } )
  }

  fn next(mut self, input: Self::Input) -> Result<Self, String> {
    // |===| Retrieving inputs.
    let svar_in = input.0 ;
    
    // |===| Computing next state.
    let svar_cpt = (svar_in + self.svar_cpt) ;
    let svar_ok = (svar_cpt >= 0) ;
    
    // |===| Checking assertions.
    
    
    // |===| Checking assumptions.
    
    
    // |===| Updating next state.
    // |===| Inputs.
    self.svar_in = svar_in ;
    
    // |===| Outputs.
    self.svar_cpt = svar_cpt ;
    self.svar_ok = svar_ok ;
    
    // |===| Locals.
    
    
    // |===| Calls.
    
    
    // |===| Return new state.
    Ok( self )
  }

  fn output(& self) -> Self::Output {(
    self.svar_cpt,
    self.svar_ok,
  )}
  fn output_str(& self) -> String {
    format!(
      "{}, \
      {}",
      self.svar_cpt,
      self.svar_ok
    )
  }
}



/// Types and structures for systems.
pub mod helpers {
  use std::io::{ Stdin, stdin } ;
  use std::process::exit ;

  /// Prints usage.
  pub fn help() {
    println!("") ;
    println!("\
Options:
  -h, --help
    prints this message
  --test
    inputs:  Int (in)
    outputs: Int (cpt)
             Bool (ok)
  --top
    inputs:  Int (in)
             Int (dont_care)
             Int (cpt)
             Bool (ok)
    outputs: Bool (abs_2)
             Bool (mode_neg_1)
             Bool (mode_pos_1)
             Bool (mode_zero_1)
Usage:
  Inputs (outputs) are read (printed) as comma-separated values on a single
  line.
  The read-eval-print loop runs forever, write \"exit\" or \"quit\"
  to exit it cleanly.
Default system: \"top\".\
    ") ;
    println!("")
  }

  /// Prints usage, an error, and exits with status `2`.
  pub fn error<T: ::std::fmt::Display>(e: T) {
    help() ;
    println!("Error: {}", e) ;
    println!("") ;
    exit(2)
  }

  /// Handles CLA.
  pub fn clap_and_run() {
    use std::env::args ;
    let mut args = args() ;
    // Skipping first argument (name of binary).
    match args.next() {
      Some(_) => (),
      None => unreachable!(),
    } ;
    if let Some(arg) = args.next() {
      match & arg as & str {
        "-h" | "--help" => {
          help() ;
          exit(0)
        },
        "--test" => super::Test::run(),
        "--top" => super::Top::run(),
        arg => error(
          format!("unexpected argument \"{}\".", arg)
        ),
      }
    } ;
    // If no argument given, run top system.
    super::Top::run()
  }

  /// Alias for `i64`.
  pub type Int = i64 ;
  /// Alias for `f64`.
  pub type Real = f64 ;
  /// Alias for `bool`.
  pub type Bool = bool ;

  /// Stores an `Stdin` and a buffer to read lines.
  pub struct InputReader {
    /// Standard input.
    stdin: Stdin,
    /// String buffer.
    buff: String,
  }
  impl InputReader {
    /// Creates an input reader.
    pub fn mk() -> Self {
      InputReader {
        stdin: stdin(),
        buff: String::with_capacity(100),
      }
    }
    /// Reads comma separated inputs from standard input.
    pub fn read_inputs(& mut self) -> Result<Vec<String>, String> {
      self.buff.clear() ;
      match self.stdin.read_line(& mut self.buff) {
        Ok(_) => (),
        Err(e) => return Err(
          format!("could not read line from stdin: {}", e)
        ),
      } ;
      let chars = self.buff.trim_left().chars() ;
      let mut buff = String::new() ;
      let mut vec = vec![] ;
      for c in chars {
        match c {
          ' ' | '\t' => (),
          ',' | '\n' => {
            vec.push(buff.clone()) ;
            buff.clear()
          },
          _ => buff.push(c),
        }
      } ;
      if vec.len() > 1 {
        match vec[0].trim() {
          "exit" | "quit" => exit(0),
          _ => ()
        }
      } ;
      Ok(vec)
    }
  }

  /// Trait all systems must implement.
  pub trait Sys: Sized {
    /// Type of inputs.
    type Input ;
    /// Type of outputs.
    type Output ;
    /// Number of inputs expected.
    fn arity() -> usize ;
    /// Parses a vector of inputs.
    fn input_of(Vec<String>) -> Result<Self::Input, String> ;
    /// Initial state of the system.
    fn init(Self::Input) -> Result<Self, String> ;
    /// Computes the next step.
    fn next(self, Self::Input) -> Result<Self, String> ;
    /// Reads inputs from standard input, computes initial state, prints output.
    fn read_init(reader: & mut InputReader) -> Result<Self, String> {
      match Self::input_of( try!(reader.read_inputs()) ) {
        Ok(inputs) => {
          let init = try!( Self::init(inputs) ) ;
          println!("{}", init.output_str()) ;
          Ok(init)
        },
        Err(s) => Err(s),
      }
    }
    /// Reads inputs from standard input, computes next step, prints output.
    fn read_next(self, reader: & mut InputReader) -> Result<Self, String> {
      match Self::input_of( try!(reader.read_inputs()) ) {
        Ok(inputs) => {
          let next = try!( self.next(inputs) ) ;
          println!("{}", next.output_str()) ;
          Ok(next)
        },
        Err(s) => Err(s),
      }
    }
    /// Output of the system.
    fn output(& self) -> Self::Output ;
    /// String representation of the output.
    fn output_str(& self) -> String ;
    /// Runs a never-ending, read-eval-print loop on the system.
    fn run() -> ! {
      let mut reader = InputReader::mk() ;
      let mut state = match Self::read_init(& mut reader) {
        Ok(init) => init,
        Err(e) => {
          println!("(Error: {})", e) ;
          exit(2)
        }
      } ;
      loop {
        match state.read_next(& mut reader) {
          Ok(next) => state = next,
          Err(e) => {
            println!("(Error: {})", e) ;
            exit(2)
          }
        }
      }
    }
  }
}

/// Parsing functions.
pub mod parse {
  use helpers::{ Int, Real, Bool } ;
  use std::fmt::Display ;
  use std::str::FromStr ;
  /// Generic parser to factor error handling out.
  fn generic<
    Out, Error: Display, F: Fn(& str) -> Result<Out, Error>
  >(s: & str, f: F, typ3: & 'static str) -> Result<Out, String> {
    match f(s) {
      Ok(res) => Ok(res),
      Err(e) => Err(
        format!("could not parse \"{}\" as {}: {}", s, typ3, e)
      ),
    }
  }
  /// Parses a [`Bool`](../type.Bool.html).
  pub fn bool(s: & str) -> Result<Bool, String> {
    generic(
      s,
      |s| match s {
        "true" | "on" => Ok(true),
        "false" | "off" => Ok(false),
        _ => Err(
          format!("legal values: true, on, false, off")
        ),
      },
      "a bool"
    )
  }
  /// Parses an [`Int`](../type.Int.html).
  pub fn int(s: & str) -> Result<Int, String> {
    generic(s, |s| Int::from_str(s), "an int")
  }
  /// Parses a [`Real`](../type.Real.html).
  pub fn real(s: & str) -> Result<Real, String> {
    generic(s, |s| Real::from_str(s), "a real")
  }
}


